/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApplicationSplatRouteImport } from './routes/_application/$'
import { Route as ApplicationConversationsRouteRouteImport } from './routes/_application/conversations/route'
import { Route as ApplicationConversationsIndexRouteImport } from './routes/_application/conversations/index'
import { Route as ApiPusherSplatRouteImport } from './routes/api/pusher/$'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'
import { Route as ApiConversationsChar123conversationIdChar125SeenRouteImport } from './routes/api/conversations/{$conversationId}/seen'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApplicationSplatRoute = ApplicationSplatRouteImport.update({
  id: '/_application/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApplicationConversationsRouteRoute =
  ApplicationConversationsRouteRouteImport.update({
    id: '/_application/conversations',
    path: '/conversations',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApplicationConversationsIndexRoute =
  ApplicationConversationsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ApplicationConversationsRouteRoute,
  } as any)
const ApiPusherSplatRoute = ApiPusherSplatRouteImport.update({
  id: '/api/pusher/$',
  path: '/api/pusher/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiConversationsChar123conversationIdChar125SeenRoute =
  ApiConversationsChar123conversationIdChar125SeenRouteImport.update({
    id: '/api/conversations/{$conversationId}/seen',
    path: '/api/conversations/{$conversationId}/seen',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/conversations': typeof ApplicationConversationsRouteRouteWithChildren
  '/$': typeof ApplicationSplatRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/pusher/$': typeof ApiPusherSplatRoute
  '/conversations/': typeof ApplicationConversationsIndexRoute
  '/api/conversations/{$conversationId}/seen': typeof ApiConversationsChar123conversationIdChar125SeenRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof ApplicationSplatRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/pusher/$': typeof ApiPusherSplatRoute
  '/conversations': typeof ApplicationConversationsIndexRoute
  '/api/conversations/{$conversationId}/seen': typeof ApiConversationsChar123conversationIdChar125SeenRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_application/conversations': typeof ApplicationConversationsRouteRouteWithChildren
  '/_application/$': typeof ApplicationSplatRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/pusher/$': typeof ApiPusherSplatRoute
  '/_application/conversations/': typeof ApplicationConversationsIndexRoute
  '/api/conversations/{$conversationId}/seen': typeof ApiConversationsChar123conversationIdChar125SeenRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/conversations'
    | '/$'
    | '/api/auth/$'
    | '/api/pusher/$'
    | '/conversations/'
    | '/api/conversations/{$conversationId}/seen'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/api/auth/$'
    | '/api/pusher/$'
    | '/conversations'
    | '/api/conversations/{$conversationId}/seen'
  id:
    | '__root__'
    | '/'
    | '/_application/conversations'
    | '/_application/$'
    | '/api/auth/$'
    | '/api/pusher/$'
    | '/_application/conversations/'
    | '/api/conversations/{$conversationId}/seen'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApplicationConversationsRouteRoute: typeof ApplicationConversationsRouteRouteWithChildren
  ApplicationSplatRoute: typeof ApplicationSplatRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiPusherSplatRoute: typeof ApiPusherSplatRoute
  ApiConversationsChar123conversationIdChar125SeenRoute: typeof ApiConversationsChar123conversationIdChar125SeenRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_application/$': {
      id: '/_application/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof ApplicationSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_application/conversations': {
      id: '/_application/conversations'
      path: '/conversations'
      fullPath: '/conversations'
      preLoaderRoute: typeof ApplicationConversationsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_application/conversations/': {
      id: '/_application/conversations/'
      path: '/'
      fullPath: '/conversations/'
      preLoaderRoute: typeof ApplicationConversationsIndexRouteImport
      parentRoute: typeof ApplicationConversationsRouteRoute
    }
    '/api/pusher/$': {
      id: '/api/pusher/$'
      path: '/api/pusher/$'
      fullPath: '/api/pusher/$'
      preLoaderRoute: typeof ApiPusherSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/conversations/{$conversationId}/seen': {
      id: '/api/conversations/{$conversationId}/seen'
      path: '/api/conversations/{$conversationId}/seen'
      fullPath: '/api/conversations/{$conversationId}/seen'
      preLoaderRoute: typeof ApiConversationsChar123conversationIdChar125SeenRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface ApplicationConversationsRouteRouteChildren {
  ApplicationConversationsIndexRoute: typeof ApplicationConversationsIndexRoute
}

const ApplicationConversationsRouteRouteChildren: ApplicationConversationsRouteRouteChildren =
  {
    ApplicationConversationsIndexRoute: ApplicationConversationsIndexRoute,
  }

const ApplicationConversationsRouteRouteWithChildren =
  ApplicationConversationsRouteRoute._addFileChildren(
    ApplicationConversationsRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApplicationConversationsRouteRoute:
    ApplicationConversationsRouteRouteWithChildren,
  ApplicationSplatRoute: ApplicationSplatRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiPusherSplatRoute: ApiPusherSplatRoute,
  ApiConversationsChar123conversationIdChar125SeenRoute:
    ApiConversationsChar123conversationIdChar125SeenRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
